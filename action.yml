name: 'PyPSA Validator Bot'
description: 'PyPSA Validator Bot'
autor: 'lkstrp'
inputs:
  step:
    description: 'Step to run'
    required: true
    type: choice
    options:
      - 'run-self-hosted-validation'
      - 'create-comment'
  # Needed for 'run-self-hosted-validation' step
  env_file:
    description: 'File for conda/mamba environment'
    type: string
  snakemake_config:
    description: 'Snakemake config file'
    type: string
  pre_command:
    description: 'Pre-command to run before validation'
    type: string
  # Needed for 'create-comment' step
  plots:
    description: 'Plots to be shown in comment'
  repo_private_key:
    description: 'Private key to access the plots repo'
    type: string

# Reminder
# - ${{ github.repository }} -> 'user/repo'
# - ${{ github.event.repository.name }} -> 'repo'

runs:
  using: "composite"
  steps:

    # ----------------------------------------
    # 'run-self-hosted-validation' step
    # ----------------------------------------
    - name: Run self-hosted validation
      if: ${{ inputs.step == 'run-self-hosted-validation' }}
      run: |
        ~/runner-scripts/run_validation.sh \
        --repo ${{ github.repository }} \
        --branch ${{ github.head_ref }} \
        --base_branch ${{ github.base_ref }} \
        --env_file ${{ inputs.env_file }} \
        --config_file ${{ inputs.snakemake_config }} \
        --pre_command "${{ inputs.pre_command }}"
      shell: bash

    # ----------------------------------------
    # 'create-comment' step
    # ----------------------------------------
    - name: Download artifacts
      if: ${{ inputs.step == 'create-comment' }}
      uses: actions/download-artifact@v4
    
    - name: Move artifacts to home directory
      if: ${{ inputs.step == 'create-comment' }}
      run: |
        # Move artifacts to home directory
        mkdir $HOME/artifacts
        mv ./* $HOME/artifacts
      shell: bash
  
    - name: Get variables from artifacts
      if: ${{ inputs.step == 'create-comment' }}
      id: env-variables-artifacts
      run: |
        # Get compared hashes
        hash_base=$(yq e '.metadata.hash_base' $HOME/artifacts/validator-metadata/validator-metadata.yml)
        hash_feature=$(yq e '.metadata.hash_feature' $HOME/artifacts/validator-metadata/validator-metadata.yml)

        # Assert variables found  
        if [[ -z $hash_base || -z $hash_feature ]]; then
          echo "Error: Commit hashes not found"
          exit 1
        fi

        # Print and save variables
        echo "Main commit hash: ${hash_base}"
        echo "Feature commit hash: ${hash_feature}"
        echo "hash_base=${hash_base}" >> $GITHUB_OUTPUT
        echo "hash_feature=${hash_feature}" >> $GITHUB_OUTPUT
      shell: bash

    - name: Checkout main repo
      if: ${{ inputs.step == 'create-comment' }}
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Get variables from repo
      if: ${{ inputs.step == 'create-comment' }}
      id: env-variables-repo
      run: |
        # snakemake config prefix
        config_prefix=$(yq eval '.run.prefix' ${{ inputs.snakemake_config }})
        echo "Config prefix: ${config_prefix}"
        echo "config_prefix=${config_prefix}" >> $GITHUB_OUTPUT


        # Get git diff of used snakemake config
        git_diff_config=$(git diff ${{ steps.env-variables-artifacts.outputs.hash_base }} ${{ steps.env-variables-artifacts.outputs.hash_feature }} -- ${{ inputs.snakemake_config }})
        # echo "GIT_DIFF_CONFIG='${git_diff_config}'" >> $GITHUB_ENV
        echo "GIT_DIFF_CONFIG<<EOF" >> $GITHUB_ENV
        echo "${git_diff_config}" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV
        echo "git_diff_config:\n${git_diff_config}"

        # Get the number of commits ahead of main
        behind_count=$(git rev-list --right-only --count ${{ steps.env-variables-artifacts.outputs.hash_feature }}...${{ steps.env-variables-artifacts.outputs.hash_base }})
        ahead_count=$(git rev-list --left-only --count ${{ steps.env-variables-artifacts.outputs.hash_feature }}...${{ steps.env-variables-artifacts.outputs.hash_base }})
        echo "BEHIND_COUNT=${behind_count}" >> $GITHUB_ENV
        echo "behind_count: ${behind_count}"
        echo "AHEAD_COUNT=${ahead_count}" >> $GITHUB_ENV
        echo "ahead_count: ${ahead_count}"
      shell: bash

    - name: Checkout plot repo
      if: ${{ inputs.step == 'create-comment' }}
      uses: actions/checkout@v4
      with:
        repository: lkstrp/pypsa-validator
        ref: ${{ github.repository }}
        ssh-key: ${{ inputs.repo_private_key }}

    - name: Upload relevant plots
      id: upload-plots
      if: ${{ inputs.step == 'create-comment' }}
      run: |
        rm -rf _validation-images
        mkdir -p _validation-images/feature
        mkdir -p _validation-images/base
                
        # Copy plots  
        read -a plots_array <<< ${{ inputs.plots }}
        echo "Plots: ${plots_array[@]}"
        for plot in "${plots_array[@]}"
        do
          echo "Copying ${plot}"
          cp -r "$HOME/artifacts/results (feature branch)/${{ steps.env-variables-repo.outputs.config_prefix }}/${plot}" "_validation-images/feature"
          cp -r "$HOME/artifacts/results (base branch)/${{ steps.env-variables-repo.outputs.config_prefix }}/${plot}" "_validation-images/base"
        done

        # Bot config
        git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
        git config --global user.name "github-actions[bot]"

        # Add plots to repo branch
        echo "Adding plots to repo branch"
        git add _validation-images
        git commit -m "[github-actions.ci] upload validation images to show in comment" || true # ignore if no changes
        git push origin ${{ github.repository }}
        echo "COMMIT_ID=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
      shell: bash

    - name: Draft comment
      if: ${{ inputs.step == 'create-comment' }}
      run: |
        # Get potential changes from main branch
        git fetch origin
        git merge origin/main --allow-unrelated-histories

        echo "${{ inputs.plots }}"
        pip install -r requirements.txt
        python draft_comment.py \
        --repo ${{ github.repository }} \
        --artifact_url "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}" \
        --branch_name_base ${{ github.base_ref }} \
        --branch_name_feature ${{ github.head_ref }} \
        --hash_base "${{ steps.env-variables-artifacts.outputs.hash_base }}" \
        --hash_feature "${{ steps.env-variables-artifacts.outputs.hash_feature }}" \
        --config_prefix "${{ steps.env-variables-repo.outputs.config_prefix }}" \
        --dir_base "$HOME/artifacts/results (base branch)" \
        --dir_feature "$HOME/artifacts/results (feature branch)" \
        --plots_hash ${{ steps.upload-plots.outputs.COMMIT_ID }} \
        --plots "${{ inputs.plots }}" \
        > comment.txt
      shell: bash

    - name: Retrieve or create comment
      if: ${{ inputs.step == 'create-comment' }}
      id: comment
      uses: actions/github-script@v7
      with:
        script: |
          const owner = context.repo.owner;
          const repo = context.repo.repo;
          const issue_number = context.issue.number;
          
          // Fetching all comments of pr
          const comments = await github.rest.issues.listComments({
            owner,
            repo,
            issue_number
          });

            // Distinctive keyword present in bot's comments 
          const distinctiveKeyword = '_val-bot-id-keyword_';

          // Searching for existing comment with the distinctive keyword
          let botsComment;
          for (let { user, id, body } of comments.data.reverse()) {
            if (body.includes(distinctiveKeyword)) {
              botsComment = { id, body };
              break;
            }
          }
          
          // If found return its id
          if (botsComment) {
            return botsComment.id; 
          } else {
            // Creating a new comment if it doesn't exist yet and returning its ID.
            const { data: newComment } = await github.rest.issues.createComment({
              owner,
              repo,
              issue_number,
              body: `<!-- ${distinctiveKeyword} --> Initializing comment...`
            });
            
            return newComment.id;
          }

    - name: Update comment
      if: ${{ inputs.step == 'create-comment' }}
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          let comment = fs.readFileSync('comment.txt', 'utf8');
      
          github.rest.issues.updateComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            comment_id: ${{ steps.comment.outputs.result }},
            body: comment
          });

